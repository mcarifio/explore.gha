# gh workflow run --workflow=launch.yaml --field entry=${name} --field args="one two three four"
# bin/wf.run launch.yaml -f entry=${name} -f args="one two three four"

name: launch

on:
  ## gh workflow run --workflow=launch.yaml --field entry=${name} --field args="${args}"
  workflow_dispatch:
    inputs:
      ## --field entry=${name} # e.g. --field entry=smoketest or --field entry=entries
      entry:
        description: "inputs.entry, a relative (to ./gha) script pathname"
        required: false
        default: entries
      ## --field args="${args}" # e.g. --field args="one two three four"
      args:
        description: "inputs.args, the args to inputs.entry"
        required: false
        default: ''

defaults:
  run:
     # set -Eeuo pipefail, note that --init-file ${file} is NOT honored
     # shell: bash -Eueo pipefail -x -- {0}
     # more convenient to `set -x` as needed
     shell: bash -Eeuo pipefail -- {0}

jobs:
  launch-job:
    runs-on: ubuntu-latest
    env:
      current_job: launch-job
      BUILD_ROOT: "${{ github.workspace }}"
      # bash sources ${BASH_ENV} (indirectly) when starting, either in a shell or in a script
      BASH_ENV: "${{ github.workspace }}/bash_env.sh"
    steps:
      # get the code
      - uses: actions/checkout@v4

      # launch a script
      - run: |
          echo "${{ env.current_job }}/${{ env.current_step}}"
          # launch ${fqpn} if executable
          if [[ -x "${fqpn}" ]]; then
            "${fqpn}" ${{ inputs.args }}
          else
            >&2 printf "'%s' is not an entry (" ${{ inputs.entry }}
            >&2 printf "'%s' " $(${{ github.workspace }}/gha/entries }})
            >&2 printf ")\n"
            return 1
          fi
        env:
           current_step: launch-step
           fqpn: "${{ github.workspace }}/gha/${{ inputs.entry }}"
          
      # report the exit status
      - run: |
          echo "${{ env.current_job }}/${{ env.current_step}}: ${{ job.status }}"
        env:
          current_step: EXIT-step
        if: always()
